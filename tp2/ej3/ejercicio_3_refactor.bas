10 CLS

19 REM EL USUARIO INGRESA LA CANTIDAD DE VERTICES
20 INPUT "INGRESE EL NUMERO DE VERTICES "; N
30 PRINT

39 REM SE CREAN LAS ESTRUCTURAS DE DATOS VACIAS
40 DIM COST (N,N)
50 DIM DIST (N)
60 DIM SOL (N)

70 A=1

79 REM EL USUARIO INGRESA LOS VERTICES DEL GRAFO CON SUS PESOS
80 PRINT "INGRESE EL CUADRO DE COSTOS (INGRESE 0,0 PARA TERMINAR)"
90 PRINT

100 INPUT "EL EJE "; A, B
110 IF A=0 THEN 131
120 INPUT "COSTO DEL EJE "; COST(A,B)
130 GOTO 100

131 GOSUB 800

239 REM EL USUARIO INGRESA EL VERTICE DE SALIDA
240 INPUT "INGRESE EL VERTICE DE SALIDA "; V

249 REM SE INICIALIZAN LOS ARRAYS CON LOS VALORES INICIALES
250 FOR I=1 TO N
    260 DIST(I)=COST(V,I)
    270 SOL(I)=0
280 NEXT I

290 GOSUB 1000

299 REM SE IMPRIMEN LOS RESULTADOS DE LA EJECUCION
300 PRINT "SALIDA","LLEGADA","DISTANCIA"
310 FOR I=1 TO N
    320 IF DIST(I)<15000 THEN PRINT V, I, DIST(I)
330 NEXT I

339 REM SE LE PREGUNTA AL USUARIO SI DESEA VOLVER A EJECUTAR EL PROGRAMA
340 INPUT "OTRA VEZ? (SI/NO) "; RES$
350 IF RES$="NO" THEN END
360 FOR I=1 TO N
    369 REM SE VACIAN LOS ARRAYS PARA LA NUEVA EJECUCION
    370 SOL(I)=0: DIST(I)=0
380 NEXT I

389 REM EL PROGRAMA VUELVE A PEDIR EL VERTICE DE SALIDA
390 GOTO 240



798 REM LLENA LA MATRIZ DE COSTOS CON LOS VALORES CORRESPONDIENTES
799 REM SUBRUTINA_MATRIZ_DE_COSTOS(V, N, COST, DIST, SOL)

    800 REM INICIALIZA LA MATRIZ DE COSTOS
    801 FOR I=1 TO N
        802 FOR J=1 TO N
            803 IF COST (I,J)=0 THEN COST (I,J)=15000
        804 NEXT J
    805 NEXT I

    806 REM COMPLETA LA MATRIZ DE COSTOS
    807 FOR I=1 TO N
        808 FOR J=1 TO I
            809 COST (I,J)=COST (J,I)
        810 NEXT J
    811 NEXT I

812 RETURN

998 REM EJECUCION DEL ALGORITMO DEL PROGRAMA
999 REM SUBRUTINA_ALGORITMO(V, N, COST, DIST, SOL)

    1000 SOL(V)=1
    1010 DIST(V)=0
    1020 FOR I=1 TO N-1
        1030 U=15000

        1040 FOR J=1 TO N
            1050 IF DIST(J)<=U AND SOL(J)=0 THEN U=J
        1060 NEXT J

        1070 SOL(U)=1

        1080 FOR J=1 TO N
            1090 IF (DIST(U)+COST(U,J)) <= DIST(J) THEN DIST(J)=DIST(U)+COST(U,J)
        1100 NEXT J
    1110 NEXT I

1120 RETURN